#!/usr/bin/env python
import sys
import re
import numpy
import json
import subprocess

filename = None
if len(sys.argv) > 1:
    filename = sys.argv[1] + '.txt'

FLOAT_FORM = "{:.3f}"
PASSES = 3

subprocess.call(["make"])
bench_results = subprocess.check_output(["make", "bench", "PASSES={}".format(PASSES)])
bench_results = bench_results.splitlines()
output = []

line_num = 0
while line_num < len(bench_results):
    line = bench_results[line_num]

    passes = bench_results[line_num:line_num+PASSES]

    passes_output = map(lambda s: json.loads(s), passes)
    passes_times = map(lambda p: p['kernel_time'], passes_output)

    # validate output (same matrix dimension and cache config for each pass)
    passes_assert = map(lambda p: [p['kernel'], p['cache_config'], p['n']], passes_output)
    assert(all(p == passes_assert[0] for p in passes_assert))
    # every run must be valid
    assert(all(p["valid"] == True for p in passes_output))

    output.append("./{} {} {}\t times={} mean={} std_deviation={}".format(
                            passes_output[0]['kernel'], 
                            passes_output[0]['n'], 
                            passes_output[0]['cache_config'],
                            [FLOAT_FORM.format(t) for t in passes_times],
                            FLOAT_FORM.format(numpy.mean(passes_times)),
                            FLOAT_FORM.format(numpy.std(passes_times))))
    line_num += PASSES

output_str = '\n'.join(output)

if filename:
    with open(filename, 'w') as output_file:
        output_file.write(output_str)
    print "results written to {}".format(filename)
else:
    print output_str
